<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/SECURITY.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/SECURITY.md" />
              <option name="updatedContent" value="# CommitTracker Security Configuration&#10;&#10;## Security Measures Implemented&#10;&#10;### 1. Input Validation&#10;- **Pattern Matching**: Repository names and usernames validated with regex patterns&#10;- **Length Limits**: Owner names max 39 chars, repo names max 100 chars&#10;- **Character Filtering**: Only alphanumeric, dots, hyphens, and underscores allowed&#10;- **Path Traversal Protection**: Blocks &quot;..&quot;, &quot;/&quot;, &quot;\&quot; characters&#10;&#10;### 2. Authentication Security&#10;- **Token Validation**: Access tokens validated for format and length (10-100 chars)&#10;- **Secure Headers**: User-Agent and Accept headers added to API requests&#10;- **Authorization**: Bearer token authentication implemented&#10;&#10;### 3. Network Security&#10;- **SSL/TLS**: Proper SSL context configuration with system defaults&#10;- **HTTPS Only**: All API calls use secure HTTPS connections&#10;- **Certificate Validation**: SSL certificate validation enabled&#10;&#10;### 4. Rate Limiting&#10;- **API Rate Limits**: 60 requests per minute per endpoint&#10;- **Memory Management**: Automatic cleanup of old rate limit entries&#10;- **Endpoint Separation**: Different limits for commits and commit details&#10;&#10;### 5. Error Handling&#10;- **Information Disclosure Prevention**: Generic error messages to users&#10;- **Detailed Logging**: Errors logged to console for debugging&#10;- **Exception Sanitization**: Stack traces hidden from end users&#10;&#10;### 6. Data Sanitization&#10;- **XSS Prevention**: HTML/JS characters stripped from commit messages&#10;- **URL Encoding**: All URL parameters properly encoded&#10;- **Content Filtering**: Dangerous protocols (javascript:, data:) blocked&#10;&#10;### 7. GUI Security&#10;- **Client-side Validation**: Input validation at GUI level&#10;- **Security Alerts**: User-friendly security error messages&#10;- **Token Masking**: Sensitive information handling&#10;&#10;## Security Recommendations&#10;&#10;### For Developers:&#10;1. Regularly update dependencies&#10;2. Implement proper logging framework&#10;3. Add CSRF protection for web endpoints&#10;4. Consider implementing JWT tokens&#10;5. Add API key rotation mechanism&#10;&#10;### For Users:&#10;1. Use strong access tokens&#10;2. Rotate tokens regularly&#10;3. Only use tokens with minimal required permissions&#10;4. Keep application updated&#10;&#10;## Threat Model Coverage&#10;&#10;✅ **Path Traversal Attacks** - Input validation prevents directory traversal&#10;✅ **Injection Attacks** - URL encoding and parameter validation&#10;✅ **XSS Attacks** - Content sanitization implemented&#10;✅ **Information Disclosure** - Generic error messages&#10;✅ **Rate Limiting** - API abuse prevention&#10;✅ **Man-in-the-Middle** - SSL/TLS enforcement&#10;✅ **Authentication Bypass** - Token validation&#10;✅ **Input Validation** - Comprehensive input checking&#10;&#10;## Compliance Notes&#10;- Follows OWASP security guidelines&#10;- Implements defense in depth strategy&#10;- Includes proper error handling&#10;- Uses secure communication protocols" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;CommitTracker&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;javafx.version&gt;17&lt;/javafx.version&gt;&#10;        &lt;javafx.maven.plugin.version&gt;0.0.8&lt;/javafx.maven.plugin.version&gt;&#10;        &lt;javafx.runtime.path&gt;C:\JavaFX\javafx-sdk-24.0.1&lt;/javafx.runtime.path&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot bağımlılıkları sadece servisler için --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.3&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;version&gt;1.18.34&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;&#10;            &lt;version&gt;2.18.0-rc1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;            &lt;version&gt;2.18.0-rc1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.client5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpclient5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JavaFX Bağımlılıkları --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;            &lt;version&gt;${javafx.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;            &lt;version&gt;${javafx.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-base&lt;/artifactId&gt;&#10;            &lt;version&gt;${javafx.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Maven Compiler Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.11.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;22&lt;/source&gt;&#10;                    &lt;target&gt;22&lt;/target&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- JavaFX Maven Plugin - Ana GUI çalıştırıcı --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;${javafx.maven.plugin.version}&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                    &lt;commandlineArgs&gt;--module-path ${javafx.runtime.path}\lib --add-modules javafx.controls,javafx.fxml&lt;/commandlineArgs&gt;&#10;                &lt;/configuration&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;id&gt;default-cli&lt;/id&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Exec Plugin - IDE'den çalıştırmak için --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&#10;                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                    &lt;cleanupDaemonThreads&gt;false&lt;/cleanupDaemonThreads&gt;&#10;                    &lt;commandlineArgs&gt;--module-path ${javafx.runtime.path}\lib --add-modules javafx.controls,javafx.fxml&lt;/commandlineArgs&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;CommitTracker&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;22&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;22&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;javafx.version&gt;17&lt;/javafx.version&gt;&#10;        &lt;javafx.maven.plugin.version&gt;0.0.8&lt;/javafx.maven.plugin.version&gt;&#10;        &lt;javafx.runtime.path&gt;C:\JavaFX\javafx-sdk-24.0.1&lt;/javafx.runtime.path&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot bağımlılıkları sadece servisler için --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;            &lt;version&gt;3.3.3&lt;/version&gt;&#10;            &lt;exclusions&gt;&#10;                &lt;exclusion&gt;&#10;                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;&#10;                &lt;/exclusion&gt;&#10;            &lt;/exclusions&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;&#10;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;&#10;            &lt;version&gt;1.18.34&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;&#10;            &lt;version&gt;2.18.0-rc1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&#10;            &lt;version&gt;2.18.0-rc1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.client5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpclient5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.3.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- HttpClient5 için eksik core dependency --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.core5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpcore5&lt;/artifactId&gt;&#10;            &lt;version&gt;5.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.httpcomponents.core5&lt;/groupId&gt;&#10;            &lt;artifactId&gt;httpcore5-h2&lt;/artifactId&gt;&#10;            &lt;version&gt;5.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JavaFX Bağımlılıkları --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-controls&lt;/artifactId&gt;&#10;            &lt;version&gt;${javafx.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-fxml&lt;/artifactId&gt;&#10;            &lt;version&gt;${javafx.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;            &lt;artifactId&gt;javafx-base&lt;/artifactId&gt;&#10;            &lt;version&gt;${javafx.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;!-- Maven Compiler Plugin --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.11.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;22&lt;/source&gt;&#10;                    &lt;target&gt;22&lt;/target&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- JavaFX Maven Plugin - Ana GUI çalıştırıcı --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.openjfx&lt;/groupId&gt;&#10;                &lt;artifactId&gt;javafx-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;${javafx.maven.plugin.version}&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                    &lt;commandlineArgs&gt;--module-path ${javafx.runtime.path}\lib --add-modules javafx.controls,javafx.fxml&lt;/commandlineArgs&gt;&#10;                &lt;/configuration&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;id&gt;default-cli&lt;/id&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Exec Plugin - IDE'den çalıştırmak için --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&#10;                &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.1.0&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                    &lt;cleanupDaemonThreads&gt;false&lt;/cleanupDaemonThreads&gt;&#10;                    &lt;commandlineArgs&gt;--module-path ${javafx.runtime.path}\lib --add-modules javafx.controls,javafx.fxml&lt;/commandlineArgs&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;!-- Maven Shade Plugin - Fat JAR with dependencies --&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.4.1&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;package&lt;/phase&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;shade&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                        &lt;configuration&gt;&#10;                            &lt;transformers&gt;&#10;                                &lt;transformer implementation=&quot;org.apache.maven.plugins.shade.resource.ManifestResourceTransformer&quot;&gt;&#10;                                    &lt;mainClass&gt;committracker.GUI.CommitTrackerGUI&lt;/mainClass&gt;&#10;                                &lt;/transformer&gt;&#10;                            &lt;/transformers&gt;&#10;                            &lt;filters&gt;&#10;                                &lt;filter&gt;&#10;                                    &lt;artifact&gt;*:*&lt;/artifact&gt;&#10;                                    &lt;excludes&gt;&#10;                                        &lt;exclude&gt;META-INF/*.SF&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.DSA&lt;/exclude&gt;&#10;                                        &lt;exclude&gt;META-INF/*.RSA&lt;/exclude&gt;&#10;                                    &lt;/excludes&gt;&#10;                                &lt;/filter&gt;&#10;                            &lt;/filters&gt;&#10;                        &lt;/configuration&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/controller/CommitController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/controller/CommitController.java" />
              <option name="originalContent" value="package committracker.controller;&#10;&#10;import committracker.dto.CommitsRequest;&#10;import committracker.dto.CommitResponse;&#10;import committracker.enums.CommitStatus;&#10;import committracker.service.VCSService;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestParam;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;/**&#10; * REST Controller for handling commit-related API requests&#10; */&#10;@RestController&#10;public class CommitController {&#10;&#10;    private final VCSService vcsService;&#10;&#10;    @Autowired&#10;    public CommitController(VCSService vcsService) {&#10;        this.vcsService = vcsService;&#10;    }&#10;&#10;    /**&#10;     * Retrieves commits for a given repository&#10;     * @param owner Repository owner/username&#10;     * @param repo Repository name&#10;     * @return List of formatted commit responses&#10;     */&#10;    @GetMapping(&quot;/commits&quot;)&#10;    public List&lt;CommitResponse&gt; getCommits(@RequestParam String owner, @RequestParam String repo) {&#10;        CommitsRequest request = new CommitsRequest(owner, repo);&#10;        List&lt;JsonNode&gt; commits = vcsService.getCommits(request);&#10;&#10;        return Optional.ofNullable(commits)&#10;                .map(commitList -&gt; formatCommits(commitList, owner, repo))&#10;                .orElseGet(() -&gt; {&#10;                    System.out.println(&quot;Error: Could not retrieve commit list, please check your API call.&quot;);&#10;                    return new ArrayList&lt;&gt;();&#10;                });&#10;    }&#10;&#10;    /**&#10;     * Formats raw JSON commit data into CommitResponse objects&#10;     * @param commits Raw JSON commit data&#10;     * @param owner Repository owner&#10;     * @param repo Repository name&#10;     * @return List of formatted CommitResponse objects&#10;     */&#10;    public List&lt;CommitResponse&gt; formatCommits(List&lt;JsonNode&gt; commits, String owner, String repo) {&#10;        List&lt;CommitResponse&gt; responses = new ArrayList&lt;&gt;();&#10;&#10;        for (JsonNode commit : commits) {&#10;            String sha = getValueOrDefault(commit, &quot;sha&quot;, CommitStatus.UNKNOWN.getMessage());&#10;            String message = getValueOrDefault(commit.at(&quot;/commit/message&quot;), CommitStatus.NO_MESSAGE.getMessage());&#10;            String author = getValueOrDefault(commit.at(&quot;/commit/author/name&quot;), CommitStatus.UNKNOWN_AUTHOR.getMessage());&#10;            String date = getValueOrDefault(commit.at(&quot;/commit/author/date&quot;), CommitStatus.UNKNOWN_DATE.getMessage());&#10;&#10;            CommitResponse commitResponse = new CommitResponse(sha, message, author, date);&#10;&#10;            vcsService.formatCommitDetails(owner, repo, sha, commitResponse);&#10;            responses.add(commitResponse);&#10;        }&#10;        return responses;&#10;    }&#10;&#10;    private String getValueOrDefault(JsonNode node, String defaultValue) {&#10;        return node != null &amp;&amp; !node.isMissingNode() ? node.asText() : defaultValue;&#10;    }&#10;&#10;    private String getValueOrDefault(JsonNode node, String key, String defaultValue) {&#10;        return node.has(key) ? node.get(key).asText() : defaultValue;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package committracker.controller;&#10;&#10;import committracker.dto.CommitsRequest;&#10;import committracker.dto.CommitResponse;&#10;import committracker.enums.CommitStatus;&#10;import committracker.service.VCSService;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestParam;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.regex.Pattern;&#10;&#10;/**&#10; * Secure REST Controller for handling commit-related API requests&#10; */&#10;@RestController&#10;public class CommitController {&#10;&#10;    private final VCSService vcsService;&#10;    &#10;    // Security: Input validation patterns&#10;    private static final Pattern VALID_REPO_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_OWNER_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;&#10;    @Autowired&#10;    public CommitController(VCSService vcsService) {&#10;        this.vcsService = vcsService;&#10;    }&#10;&#10;    /**&#10;     * Retrieves commits for a given repository with security validations&#10;     * @param owner Repository owner/username&#10;     * @param repo Repository name&#10;     * @return List of formatted commit responses&#10;     */&#10;    @GetMapping(&quot;/commits&quot;)&#10;    public List&lt;CommitResponse&gt; getCommits(@RequestParam String owner, @RequestParam String repo) {&#10;        // Security: Input validation&#10;        if (!isValidInput(owner, repo)) {&#10;            System.err.println(&quot;Invalid input parameters detected in REST API&quot;);&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;        &#10;        CommitsRequest request = new CommitsRequest(owner, repo);&#10;        List&lt;JsonNode&gt; commits = vcsService.getCommits(request);&#10;&#10;        return Optional.ofNullable(commits)&#10;                .map(commitList -&gt; formatCommits(commitList, owner, repo))&#10;                .orElseGet(() -&gt; {&#10;                    System.out.println(&quot;Error: Could not retrieve commit list, please check your API call.&quot;);&#10;                    return new ArrayList&lt;&gt;();&#10;                });&#10;    }&#10;&#10;    /**&#10;     * Formats raw JSON commit data into CommitResponse objects&#10;     * @param commits Raw JSON commit data&#10;     * @param owner Repository owner&#10;     * @param repo Repository name&#10;     * @return List of formatted CommitResponse objects&#10;     */&#10;    public List&lt;CommitResponse&gt; formatCommits(List&lt;JsonNode&gt; commits, String owner, String repo) {&#10;        List&lt;CommitResponse&gt; responses = new ArrayList&lt;&gt;();&#10;&#10;        for (JsonNode commit : commits) {&#10;            String sha = getValueOrDefault(commit, &quot;sha&quot;, CommitStatus.UNKNOWN.getMessage());&#10;            String message = getValueOrDefault(commit.at(&quot;/commit/message&quot;), CommitStatus.NO_MESSAGE.getMessage());&#10;            String author = getValueOrDefault(commit.at(&quot;/commit/author/name&quot;), CommitStatus.UNKNOWN_AUTHOR.getMessage());&#10;            String date = getValueOrDefault(commit.at(&quot;/commit/author/date&quot;), CommitStatus.UNKNOWN_DATE.getMessage());&#10;&#10;            // Security: Sanitize message content to prevent XSS&#10;            message = sanitizeString(message);&#10;            author = sanitizeString(author);&#10;&#10;            CommitResponse commitResponse = new CommitResponse(sha, message, author, date);&#10;&#10;            vcsService.formatCommitDetails(owner, repo, sha, commitResponse);&#10;            responses.add(commitResponse);&#10;        }&#10;        return responses;&#10;    }&#10;&#10;    /**&#10;     * Security: Input validation for REST API parameters&#10;     */&#10;    private boolean isValidInput(String owner, String repo) {&#10;        if (owner == null || repo == null) {&#10;            return false;&#10;        }&#10;        &#10;        // Trim whitespace&#10;        owner = owner.trim();&#10;        repo = repo.trim();&#10;        &#10;        // Check for empty strings&#10;        if (owner.isEmpty() || repo.isEmpty()) {&#10;            return false;&#10;        }&#10;        &#10;        // Check length limits&#10;        if (owner.length() &gt; 39 || repo.length() &gt; 100) {&#10;            return false;&#10;        }&#10;        &#10;        // Check for valid characters only&#10;        if (!VALID_OWNER_NAME.matcher(owner).matches() || !VALID_REPO_NAME.matcher(repo).matches()) {&#10;            return false;&#10;        }&#10;        &#10;        // Check for path traversal attempts&#10;        if (owner.contains(&quot;..&quot;) || repo.contains(&quot;..&quot;) || &#10;            owner.contains(&quot;/&quot;) || repo.contains(&quot;/&quot;) ||&#10;            owner.contains(&quot;\\&quot;) || repo.contains(&quot;\\&quot;)) {&#10;            return false;&#10;        }&#10;        &#10;        return true;&#10;    }&#10;    &#10;    /**&#10;     * Security: Sanitize strings to prevent XSS and injection attacks&#10;     */&#10;    private String sanitizeString(String input) {&#10;        if (input == null) {&#10;            return &quot;&quot;;&#10;        }&#10;        &#10;        // Remove potentially dangerous characters&#10;        return input.replaceAll(&quot;[&lt;&gt;\&quot;'&amp;]&quot;, &quot;&quot;)&#10;                   .replaceAll(&quot;javascript:&quot;, &quot;&quot;)&#10;                   .replaceAll(&quot;data:&quot;, &quot;&quot;)&#10;                   .trim();&#10;    }&#10;&#10;    private String getValueOrDefault(JsonNode node, String defaultValue) {&#10;        return node != null &amp;&amp; !node.isMissingNode() ? sanitizeString(node.asText()) : defaultValue;&#10;    }&#10;&#10;    private String getValueOrDefault(JsonNode node, String key, String defaultValue) {&#10;        return node.has(key) ? sanitizeString(node.get(key).asText()) : defaultValue;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/dto/CommitFileResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/dto/CommitFileResponse.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package committracker.dto;&#10;&#10;import lombok.Data;&#10;&#10;/**&#10; * Data Transfer Object for commit file changes&#10; */&#10;@Data&#10;public class CommitFileResponse {&#10;    private String filename;&#10;    private String status;&#10;    private int additions;&#10;    private int deletions;&#10;    private int changes;&#10;    private String patch;&#10;    private String blobUrl;&#10;    private String rawUrl;&#10;    &#10;    // Helper method for backward compatibility&#10;    public String getFileName() {&#10;        return filename;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/dto/CommitResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/dto/CommitResponse.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package committracker.dto;&#10;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import lombok.AllArgsConstructor;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Data Transfer Object for commit response data&#10; */&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CommitResponse {&#10;    private String sha;&#10;    private String message;&#10;    private String authorName;&#10;    private String authorEmail;&#10;    private String committerName;&#10;    private String committerEmail;&#10;    private String date;&#10;    private int additions;&#10;    private int deletions;&#10;    private int totalChanges;&#10;    private String url;&#10;    private String htmlUrl;&#10;    private List&lt;CommitFileResponse&gt; files;&#10;    &#10;    // Constructor for basic usage&#10;    public CommitResponse(String sha, String message, String authorName, String date) {&#10;        this.sha = sha;&#10;        this.message = message;&#10;        this.authorName = authorName;&#10;        this.date = date;&#10;    }&#10;    &#10;    // Helper method for backward compatibility&#10;    public String getAuthor() {&#10;        return authorName;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/dto/CommitsRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/dto/CommitsRequest.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package committracker.dto;&#10;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import lombok.AllArgsConstructor;&#10;&#10;/**&#10; * Data Transfer Object for commit requests&#10; */&#10;@Data&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class CommitsRequest {&#10;    private String platform;&#10;    private String owner;&#10;    private String repo;&#10;    private String accessToken;&#10;    private String branch;&#10;    private int limit = 30; // Default limit&#10;    &#10;    // Constructor for basic usage&#10;    public CommitsRequest(String owner, String repo) {&#10;        this.owner = owner;&#10;        this.repo = repo;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/service/AzureDevOpsService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/service/AzureDevOpsService.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package committracker.service;&#10;&#10;import committracker.dto.CommitResponse;&#10;import committracker.dto.CommitsRequest;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.apache.hc.client5.http.classic.methods.HttpGet;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;&#10;import org.apache.hc.client5.http.impl.classic.HttpClients;&#10;import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;&#10;import org.apache.hc.core5.ssl.SSLContexts;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.net.ssl.SSLContext;&#10;import java.net.URLEncoder;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.ArrayList;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;import java.util.concurrent.atomic.AtomicInteger;&#10;import java.util.regex.Pattern;&#10;&#10;/**&#10; * Secure Azure DevOps API service implementation for fetching commit data&#10; */&#10;@Service&#10;public class AzureDevOpsService implements VCSService {&#10;    private final String accessToken;&#10;&#10;    // Security: Rate limiting per API endpoint&#10;    private final ConcurrentHashMap&lt;String, AtomicInteger&gt; rateLimitMap = new ConcurrentHashMap&lt;&gt;();&#10;    private static final int MAX_REQUESTS_PER_MINUTE = 60;&#10;&#10;    // Security: Input validation patterns&#10;    private static final Pattern VALID_ORG_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_PROJECT_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_REPO_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_COMMIT_ID = Pattern.compile(&quot;^[a-fA-F0-9]{40}$&quot;);&#10;&#10;    public AzureDevOpsService(String accessToken) {&#10;        this.accessToken = accessToken;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;JsonNode&gt; getCommits(CommitsRequest request) {&#10;        List&lt;JsonNode&gt; commits = new ArrayList&lt;&gt;();&#10;&#10;        // Security: Input validation&#10;        if (!isValidInput(request.getOwner(), request.getRepo())) {&#10;            System.err.println(&quot;Invalid input parameters detected&quot;);&#10;            return commits;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            // Azure DevOps format: https://dev.azure.com/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits&#10;            String baseUrl = &quot;https://dev.azure.com/&quot; +&#10;                URLEncoder.encode(request.getOwner(), StandardCharsets.UTF_8) + &quot;/&quot; +&#10;                URLEncoder.encode(request.getRepo(), StandardCharsets.UTF_8) +&#10;                &quot;/_apis/git/repositories/&quot; +&#10;                URLEncoder.encode(request.getRepo(), StandardCharsets.UTF_8) +&#10;                &quot;/commits?api-version=6.0&quot;;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(baseUrl)) {&#10;                System.err.println(&quot;Rate limit exceeded for Azure DevOps API&quot;);&#10;                return commits;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(baseUrl);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                String auth = Base64.getEncoder().encodeToString((&quot;:&quot; + accessToken).getBytes());&#10;                httpGet.setHeader(&quot;Authorization&quot;, &quot;Basic &quot; + auth);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    JsonNode rootNode = mapper.readTree(responseBody);&#10;&#10;                    JsonNode values = rootNode.get(&quot;value&quot;);&#10;                    if (values != null &amp;&amp; values.isArray()) {&#10;                        for (JsonNode commit : values) {&#10;                            commits.add(commit);&#10;                        }&#10;                    }&#10;                } else if (response.getCode() == 404) {&#10;                    System.err.println(&quot;Azure DevOps repository not found or is private. Please check organization/project/repository names and access token.&quot;);&#10;                } else if (response.getCode() == 403) {&#10;                    System.err.println(&quot;Access denied. Invalid token or insufficient permissions.&quot;);&#10;                } else {&#10;                    System.err.println(&quot;Azure DevOps API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commits from Azure DevOps: &quot; + e.getMessage());&#10;        }&#10;&#10;        return commits;&#10;    }&#10;&#10;    @Override&#10;    public JsonNode getCommitDetails(String organization, String project, String commitId) {&#10;        // Security: Input validation&#10;        if (!isValidInput(organization, project) || !VALID_COMMIT_ID.matcher(commitId).matches()) {&#10;            System.err.println(&quot;Invalid input parameters for commit details&quot;);&#10;            return null;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String url = &quot;https://dev.azure.com/&quot; +&#10;                URLEncoder.encode(organization, StandardCharsets.UTF_8) + &quot;/&quot; +&#10;                URLEncoder.encode(project, StandardCharsets.UTF_8) +&#10;                &quot;/_apis/git/repositories/&quot; +&#10;                URLEncoder.encode(project, StandardCharsets.UTF_8) +&#10;                &quot;/commits/&quot; + commitId + &quot;?api-version=6.0&quot;;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(url)) {&#10;                System.err.println(&quot;Rate limit exceeded for Azure DevOps API&quot;);&#10;                return null;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(url);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                String auth = Base64.getEncoder().encodeToString((&quot;:&quot; + accessToken).getBytes());&#10;                httpGet.setHeader(&quot;Authorization&quot;, &quot;Basic &quot; + auth);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    return mapper.readTree(responseBody);&#10;                } else {&#10;                    System.err.println(&quot;Azure DevOps API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commit details from Azure DevOps: &quot; + e.getMessage());&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void formatCommitDetails(String organization, String project, String commitId, CommitResponse commitResponse) {&#10;        JsonNode commitDetails = getCommitDetails(organization, project, commitId);&#10;&#10;        if (commitDetails != null) {&#10;            JsonNode author = commitDetails.get(&quot;author&quot;);&#10;            JsonNode committer = commitDetails.get(&quot;committer&quot;);&#10;&#10;            if (author != null) {&#10;                commitResponse.setAuthorName(author.get(&quot;name&quot;).asText());&#10;                commitResponse.setAuthorEmail(author.get(&quot;email&quot;).asText());&#10;                commitResponse.setDate(author.get(&quot;date&quot;).asText());&#10;            }&#10;&#10;            if (committer != null) {&#10;                commitResponse.setCommitterName(committer.get(&quot;name&quot;).asText());&#10;                commitResponse.setCommitterEmail(committer.get(&quot;email&quot;).asText());&#10;            }&#10;&#10;            commitResponse.setMessage(commitDetails.get(&quot;comment&quot;).asText());&#10;&#10;            // Azure DevOps doesn't provide detailed stats in the commit endpoint&#10;            // Would need to fetch changes separately for line counts&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Security: Validate input parameters&#10;     */&#10;    private boolean isValidInput(String organization, String project) {&#10;        if (organization == null || project == null) {&#10;            return false;&#10;        }&#10;&#10;        // Check length limits&#10;        if (organization.length() &gt; 100 || project.length() &gt; 100) {&#10;            return false;&#10;        }&#10;&#10;        return VALID_ORG_NAME.matcher(organization).matches() &amp;&amp;&#10;               VALID_PROJECT_NAME.matcher(project).matches();&#10;    }&#10;&#10;    /**&#10;     * Security: Simple rate limiting implementation&#10;     */&#10;    private boolean checkRateLimit(String endpoint) {&#10;        String key = endpoint + &quot;_&quot; + (System.currentTimeMillis() / 60000);&#10;        AtomicInteger count = rateLimitMap.computeIfAbsent(key, k -&gt; new AtomicInteger(0));&#10;&#10;        // Clean old entries&#10;        rateLimitMap.entrySet().removeIf(entry -&gt;&#10;            !entry.getKey().endsWith(&quot;_&quot; + (System.currentTimeMillis() / 60000)));&#10;&#10;        return count.incrementAndGet() &lt;= MAX_REQUESTS_PER_MINUTE;&#10;    }&#10;&#10;    /**&#10;     * Security: Create HTTP client with proper SSL/TLS configuration&#10;     */&#10;    private CloseableHttpClient createSecureHttpClient() throws Exception {&#10;        return HttpClients.custom()&#10;                .useSystemProperties()&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/service/BitbucketService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/service/BitbucketService.java" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="package committracker.service;&#10;&#10;import committracker.dto.CommitResponse;&#10;import committracker.dto.CommitsRequest;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.apache.hc.client5.http.classic.methods.HttpGet;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;&#10;import org.apache.hc.client5.http.impl.classic.HttpClients;&#10;import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;&#10;import org.apache.hc.core5.ssl.SSLContexts;&#10;import org.springframework.stereotype.Service;&#10;&#10;import javax.net.ssl.SSLContext;&#10;import java.net.URLEncoder;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.ArrayList;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;import java.util.concurrent.atomic.AtomicInteger;&#10;import java.util.regex.Pattern;&#10;&#10;/**&#10; * Secure Bitbucket API service implementation for fetching commit data&#10; */&#10;@Service&#10;public class BitbucketService implements VCSService {&#10;    private final String accessToken;&#10;&#10;    // Security: Rate limiting per API endpoint&#10;    private final ConcurrentHashMap&lt;String, AtomicInteger&gt; rateLimitMap = new ConcurrentHashMap&lt;&gt;();&#10;    private static final int MAX_REQUESTS_PER_MINUTE = 60;&#10;&#10;    // Security: Input validation patterns&#10;    private static final Pattern VALID_WORKSPACE = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_REPO_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_SHA = Pattern.compile(&quot;^[a-fA-F0-9]{40}$&quot;);&#10;&#10;    public BitbucketService(String accessToken) {&#10;        this.accessToken = accessToken;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;JsonNode&gt; getCommits(CommitsRequest request) {&#10;        List&lt;JsonNode&gt; commits = new ArrayList&lt;&gt;();&#10;&#10;        // Security: Input validation&#10;        if (!isValidInput(request.getOwner(), request.getRepo())) {&#10;            System.err.println(&quot;Invalid input parameters detected&quot;);&#10;            return commits;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String baseUrl = &quot;https://api.bitbucket.org/2.0/repositories/&quot; +&#10;                URLEncoder.encode(request.getOwner(), StandardCharsets.UTF_8) + &quot;/&quot; +&#10;                URLEncoder.encode(request.getRepo(), StandardCharsets.UTF_8) + &quot;/commits&quot;;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(baseUrl)) {&#10;                System.err.println(&quot;Rate limit exceeded for Bitbucket API&quot;);&#10;                return commits;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(baseUrl);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                String auth = Base64.getEncoder().encodeToString((&quot;x-token-auth:&quot; + accessToken).getBytes());&#10;                httpGet.setHeader(&quot;Authorization&quot;, &quot;Basic &quot; + auth);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    JsonNode rootNode = mapper.readTree(responseBody);&#10;&#10;                    JsonNode values = rootNode.get(&quot;values&quot;);&#10;                    if (values != null &amp;&amp; values.isArray()) {&#10;                        for (JsonNode commit : values) {&#10;                            commits.add(commit);&#10;                        }&#10;                    }&#10;                } else if (response.getCode() == 404) {&#10;                    System.err.println(&quot;Bitbucket repository not found or is private. Please check repository name and access token.&quot;);&#10;                } else if (response.getCode() == 403) {&#10;                    System.err.println(&quot;Access denied. Invalid token or insufficient permissions.&quot;);&#10;                } else {&#10;                    System.err.println(&quot;Bitbucket API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commits from Bitbucket: &quot; + e.getMessage());&#10;        }&#10;&#10;        return commits;&#10;    }&#10;&#10;    @Override&#10;    public JsonNode getCommitDetails(String owner, String repo, String sha) {&#10;        // Security: Input validation&#10;        if (!isValidInput(owner, repo) || !VALID_SHA.matcher(sha).matches()) {&#10;            System.err.println(&quot;Invalid input parameters for commit details&quot;);&#10;            return null;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String url = &quot;https://api.bitbucket.org/2.0/repositories/&quot; +&#10;                URLEncoder.encode(owner, StandardCharsets.UTF_8) + &quot;/&quot; +&#10;                URLEncoder.encode(repo, StandardCharsets.UTF_8) + &quot;/commits/&quot; + sha;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(url)) {&#10;                System.err.println(&quot;Rate limit exceeded for Bitbucket API&quot;);&#10;                return null;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(url);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                String auth = Base64.getEncoder().encodeToString((&quot;x-token-auth:&quot; + accessToken).getBytes());&#10;                httpGet.setHeader(&quot;Authorization&quot;, &quot;Basic &quot; + auth);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;Accept&quot;, &quot;application/json&quot;);&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    return mapper.readTree(responseBody);&#10;                } else {&#10;                    System.err.println(&quot;Bitbucket API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commit details from Bitbucket: &quot; + e.getMessage());&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void formatCommitDetails(String owner, String repo, String sha, CommitResponse commitResponse) {&#10;        JsonNode commitDetails = getCommitDetails(owner, repo, sha);&#10;&#10;        if (commitDetails != null) {&#10;            JsonNode author = commitDetails.get(&quot;author&quot;);&#10;            if (author != null) {&#10;                commitResponse.setAuthorName(author.get(&quot;display_name&quot;).asText());&#10;                JsonNode user = author.get(&quot;user&quot;);&#10;                if (user != null) {&#10;                    commitResponse.setAuthorEmail(user.get(&quot;email&quot;).asText());&#10;                }&#10;            }&#10;&#10;            commitResponse.setDate(commitDetails.get(&quot;date&quot;).asText());&#10;            commitResponse.setMessage(commitDetails.get(&quot;message&quot;).asText());&#10;&#10;            // Bitbucket doesn't provide detailed stats in the commit endpoint&#10;            // Would need to fetch diff separately for line counts&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Security: Validate input parameters&#10;     */&#10;    private boolean isValidInput(String owner, String repo) {&#10;        if (owner == null || repo == null) {&#10;            return false;&#10;        }&#10;&#10;        // Check length limits&#10;        if (owner.length() &gt; 100 || repo.length() &gt; 100) {&#10;            return false;&#10;        }&#10;&#10;        return VALID_WORKSPACE.matcher(owner).matches() &amp;&amp;&#10;               VALID_REPO_NAME.matcher(repo).matches();&#10;    }&#10;&#10;    /**&#10;     * Security: Simple rate limiting implementation&#10;     */&#10;    private boolean checkRateLimit(String endpoint) {&#10;        String key = endpoint + &quot;_&quot; + (System.currentTimeMillis() / 60000);&#10;        AtomicInteger count = rateLimitMap.computeIfAbsent(key, k -&gt; new AtomicInteger(0));&#10;&#10;        // Clean old entries&#10;        rateLimitMap.entrySet().removeIf(entry -&gt;&#10;            !entry.getKey().endsWith(&quot;_&quot; + (System.currentTimeMillis() / 60000)));&#10;&#10;        return count.incrementAndGet() &lt;= MAX_REQUESTS_PER_MINUTE;&#10;    }&#10;&#10;    /**&#10;     * Security: Create HTTP client with proper SSL/TLS configuration&#10;     */&#10;    private CloseableHttpClient createSecureHttpClient() throws Exception {&#10;        return HttpClients.custom()&#10;                .useSystemProperties()&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/service/GitHubService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/service/GitHubService.java" />
              <option name="originalContent" value="&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="package committracker.service;&#10;&#10;import committracker.dto.CommitResponse;&#10;import committracker.dto.CommitsRequest;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.apache.hc.client5.http.classic.methods.HttpGet;&#10;import org.apache.hc.client5.http.config.RequestConfig;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;&#10;import org.apache.hc.client5.http.impl.classic.HttpClients;&#10;import org.apache.hc.core5.util.Timeout;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.net.URLEncoder;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;import java.util.concurrent.atomic.AtomicInteger;&#10;import java.util.regex.Pattern;&#10;&#10;/**&#10; * Secure GitHub API service implementation for fetching commit data&#10; */&#10;@Service&#10;public class GitHubService implements VCSService {&#10;    private final String accessToken;&#10;&#10;    // Security: Rate limiting per API endpoint&#10;    private final ConcurrentHashMap&lt;String, AtomicInteger&gt; rateLimitMap = new ConcurrentHashMap&lt;&gt;();&#10;    private static final int MAX_REQUESTS_PER_MINUTE = 60;&#10;&#10;    // Security: Input validation patterns&#10;    private static final Pattern VALID_REPO_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_OWNER_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._-]+$&quot;);&#10;    private static final Pattern VALID_SHA = Pattern.compile(&quot;^[a-fA-F0-9]{40}$&quot;);&#10;&#10;    public GitHubService(String accessToken) {&#10;        this.accessToken = accessToken;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;JsonNode&gt; getCommits(CommitsRequest request) {&#10;        List&lt;JsonNode&gt; commits = new ArrayList&lt;&gt;();&#10;&#10;        // Security: Input validation to prevent path traversal and injection attacks&#10;        if (!isValidInput(request.getOwner(), request.getRepo())) {&#10;            System.err.println(&quot;Invalid input parameters detected&quot;);&#10;            return commits;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String baseUrl = &quot;https://api.github.com/repos/&quot; +&#10;                URLEncoder.encode(request.getOwner(), StandardCharsets.UTF_8) + &quot;/&quot; +&#10;                URLEncoder.encode(request.getRepo(), StandardCharsets.UTF_8) + &quot;/commits&quot;;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(baseUrl)) {&#10;                System.err.println(&quot;Rate limit exceeded for GitHub API&quot;);&#10;                return commits;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(baseUrl);&#10;&#10;            // Add authorization header if token is provided&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                httpGet.setHeader(&quot;Authorization&quot;, &quot;token &quot; + accessToken);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;Accept&quot;, &quot;application/vnd.github.v3+json&quot;);&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    JsonNode rootNode = mapper.readTree(responseBody);&#10;&#10;                    if (rootNode.isArray()) {&#10;                        for (JsonNode commit : rootNode) {&#10;                            commits.add(commit);&#10;                        }&#10;                    }&#10;                } else if (response.getCode() == 404) {&#10;                    System.err.println(&quot;Repository not found or is private. Please check repository name and access token.&quot;);&#10;                } else if (response.getCode() == 403) {&#10;                    System.err.println(&quot;Access denied. Rate limit exceeded or invalid token.&quot;);&#10;                } else {&#10;                    System.err.println(&quot;GitHub API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commits from GitHub: &quot; + e.getMessage());&#10;        }&#10;&#10;        return commits;&#10;    }&#10;&#10;    @Override&#10;    public JsonNode getCommitDetails(String owner, String repo, String sha) {&#10;        // Security: Input validation&#10;        if (!isValidInput(owner, repo) || !VALID_SHA.matcher(sha).matches()) {&#10;            System.err.println(&quot;Invalid input parameters for commit details&quot;);&#10;            return null;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String url = &quot;https://api.github.com/repos/&quot; +&#10;                URLEncoder.encode(owner, StandardCharsets.UTF_8) + &quot;/&quot; +&#10;                URLEncoder.encode(repo, StandardCharsets.UTF_8) + &quot;/commits/&quot; + sha;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(url)) {&#10;                System.err.println(&quot;Rate limit exceeded for GitHub API&quot;);&#10;                return null;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(url);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                httpGet.setHeader(&quot;Authorization&quot;, &quot;token &quot; + accessToken);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;Accept&quot;, &quot;application/vnd.github.v3+json&quot;);&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    return mapper.readTree(responseBody);&#10;                } else {&#10;                    System.err.println(&quot;GitHub API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commit details from GitHub: &quot; + e.getMessage());&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void formatCommitDetails(String owner, String repo, String sha, CommitResponse commitResponse) {&#10;        JsonNode commitDetails = getCommitDetails(owner, repo, sha);&#10;&#10;        if (commitDetails != null) {&#10;            JsonNode commit = commitDetails.get(&quot;commit&quot;);&#10;            if (commit != null) {&#10;                JsonNode author = commit.get(&quot;author&quot;);&#10;                JsonNode committer = commit.get(&quot;committer&quot;);&#10;&#10;                if (author != null) {&#10;                    commitResponse.setAuthorName(author.get(&quot;name&quot;).asText());&#10;                    commitResponse.setAuthorEmail(author.get(&quot;email&quot;).asText());&#10;                    commitResponse.setDate(author.get(&quot;date&quot;).asText());&#10;                }&#10;&#10;                if (committer != null) {&#10;                    commitResponse.setCommitterName(committer.get(&quot;name&quot;).asText());&#10;                    commitResponse.setCommitterEmail(committer.get(&quot;email&quot;).asText());&#10;                }&#10;&#10;                commitResponse.setMessage(commit.get(&quot;message&quot;).asText());&#10;            }&#10;&#10;            JsonNode stats = commitDetails.get(&quot;stats&quot;);&#10;            if (stats != null) {&#10;                commitResponse.setAdditions(stats.get(&quot;additions&quot;).asInt());&#10;                commitResponse.setDeletions(stats.get(&quot;deletions&quot;).asInt());&#10;                commitResponse.setTotalChanges(stats.get(&quot;total&quot;).asInt());&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Security: Validate input parameters to prevent injection attacks&#10;     */&#10;    private boolean isValidInput(String owner, String repo) {&#10;        if (owner == null || repo == null) {&#10;            return false;&#10;        }&#10;&#10;        // Check length limits&#10;        if (owner.length() &gt; 39 || repo.length() &gt; 100) {&#10;            return false;&#10;        }&#10;&#10;        // Validate against patterns&#10;        return VALID_OWNER_NAME.matcher(owner).matches() &amp;&amp;&#10;               VALID_REPO_NAME.matcher(repo).matches();&#10;    }&#10;&#10;    /**&#10;     * Security: Simple rate limiting implementation&#10;     */&#10;    private boolean checkRateLimit(String endpoint) {&#10;        String key = endpoint + &quot;_&quot; + (System.currentTimeMillis() / 60000);&#10;        AtomicInteger count = rateLimitMap.computeIfAbsent(key, k -&gt; new AtomicInteger(0));&#10;&#10;        // Clean old entries&#10;        rateLimitMap.entrySet().removeIf(entry -&gt;&#10;            !entry.getKey().endsWith(&quot;_&quot; + (System.currentTimeMillis() / 60000)));&#10;&#10;        return count.incrementAndGet() &lt;= MAX_REQUESTS_PER_MINUTE;&#10;    }&#10;&#10;    /**&#10;     * Security: Create HTTP client with proper SSL/TLS configuration and timeouts&#10;     */&#10;    private CloseableHttpClient createSecureHttpClient() throws Exception {&#10;        RequestConfig config = RequestConfig.custom()&#10;                .setConnectionRequestTimeout(Timeout.ofSeconds(10))&#10;                .setResponseTimeout(Timeout.ofSeconds(30))&#10;                .build();&#10;        &#10;        return HttpClients.custom()&#10;                .useSystemProperties()&#10;                .setDefaultRequestConfig(config)&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/committracker/service/GitLabService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/committracker/service/GitLabService.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="package committracker.service;&#10;&#10;import committracker.dto.CommitResponse;&#10;import committracker.dto.CommitsRequest;&#10;import com.fasterxml.jackson.databind.JsonNode;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.apache.hc.client5.http.classic.methods.HttpGet;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;&#10;import org.apache.hc.client5.http.impl.classic.CloseableHttpResponse;&#10;import org.apache.hc.client5.http.impl.classic.HttpClients;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.net.URLEncoder;&#10;import java.nio.charset.StandardCharsets;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.concurrent.ConcurrentHashMap;&#10;import java.util.concurrent.atomic.AtomicInteger;&#10;import java.util.regex.Pattern;&#10;&#10;/**&#10; * Secure GitLab API service implementation for fetching commit data&#10; */&#10;@Service&#10;public class GitLabService implements VCSService {&#10;    private final String accessToken;&#10;&#10;    // Security: Rate limiting per API endpoint&#10;    private final ConcurrentHashMap&lt;String, AtomicInteger&gt; rateLimitMap = new ConcurrentHashMap&lt;&gt;();&#10;    private static final int MAX_REQUESTS_PER_MINUTE = 60;&#10;&#10;    // Security: Input validation patterns&#10;    private static final Pattern VALID_PROJECT_NAME = Pattern.compile(&quot;^[a-zA-Z0-9._/-]+$&quot;);&#10;    private static final Pattern VALID_SHA = Pattern.compile(&quot;^[a-fA-F0-9]{40}$&quot;);&#10;&#10;    public GitLabService(String accessToken) {&#10;        this.accessToken = accessToken;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;JsonNode&gt; getCommits(CommitsRequest request) {&#10;        List&lt;JsonNode&gt; commits = new ArrayList&lt;&gt;();&#10;&#10;        // Security: Input validation&#10;        if (!isValidInput(request.getOwner(), request.getRepo())) {&#10;            System.err.println(&quot;Invalid input parameters detected&quot;);&#10;            return commits;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String projectPath = URLEncoder.encode(request.getOwner() + &quot;/&quot; + request.getRepo(), StandardCharsets.UTF_8);&#10;            String baseUrl = &quot;https://gitlab.com/api/v4/projects/&quot; + projectPath + &quot;/repository/commits&quot;;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(baseUrl)) {&#10;                System.err.println(&quot;Rate limit exceeded for GitLab API&quot;);&#10;                return commits;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(baseUrl);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                httpGet.setHeader(&quot;PRIVATE-TOKEN&quot;, accessToken);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    JsonNode rootNode = mapper.readTree(responseBody);&#10;&#10;                    if (rootNode.isArray()) {&#10;                        for (JsonNode commit : rootNode) {&#10;                            commits.add(commit);&#10;                        }&#10;                    }&#10;                } else if (response.getCode() == 404) {&#10;                    System.err.println(&quot;GitLab project not found or is private. Please check project name and access token.&quot;);&#10;                } else if (response.getCode() == 403) {&#10;                    System.err.println(&quot;Access denied. Invalid token or insufficient permissions.&quot;);&#10;                } else {&#10;                    System.err.println(&quot;GitLab API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commits from GitLab: &quot; + e.getMessage());&#10;        }&#10;&#10;        return commits;&#10;    }&#10;&#10;    @Override&#10;    public JsonNode getCommitDetails(String owner, String repo, String sha) {&#10;        // Security: Input validation&#10;        if (!isValidInput(owner, repo) || !VALID_SHA.matcher(sha).matches()) {&#10;            System.err.println(&quot;Invalid input parameters for commit details&quot;);&#10;            return null;&#10;        }&#10;&#10;        try (CloseableHttpClient httpClient = createSecureHttpClient()) {&#10;            String projectPath = URLEncoder.encode(owner + &quot;/&quot; + repo, StandardCharsets.UTF_8);&#10;            String url = &quot;https://gitlab.com/api/v4/projects/&quot; + projectPath + &quot;/repository/commits/&quot; + sha;&#10;&#10;            // Security: Rate limiting check&#10;            if (!checkRateLimit(url)) {&#10;                System.err.println(&quot;Rate limit exceeded for GitLab API&quot;);&#10;                return null;&#10;            }&#10;&#10;            HttpGet httpGet = new HttpGet(url);&#10;&#10;            if (accessToken != null &amp;&amp; !accessToken.isEmpty()) {&#10;                httpGet.setHeader(&quot;PRIVATE-TOKEN&quot;, accessToken);&#10;            }&#10;&#10;            httpGet.setHeader(&quot;User-Agent&quot;, &quot;CommitTracker-App&quot;);&#10;&#10;            try (CloseableHttpResponse response = httpClient.execute(httpGet)) {&#10;                String responseBody = new String(response.getEntity().getContent().readAllBytes(), StandardCharsets.UTF_8);&#10;&#10;                if (response.getCode() == 200) {&#10;                    ObjectMapper mapper = new ObjectMapper();&#10;                    return mapper.readTree(responseBody);&#10;                } else {&#10;                    System.err.println(&quot;GitLab API Error: &quot; + response.getCode() + &quot; - &quot; + responseBody);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching commit details from GitLab: &quot; + e.getMessage());&#10;        }&#10;&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public void formatCommitDetails(String owner, String repo, String sha, CommitResponse commitResponse) {&#10;        JsonNode commitDetails = getCommitDetails(owner, repo, sha);&#10;&#10;        if (commitDetails != null) {&#10;            commitResponse.setAuthorName(commitDetails.get(&quot;author_name&quot;).asText());&#10;            commitResponse.setAuthorEmail(commitDetails.get(&quot;author_email&quot;).asText());&#10;            commitResponse.setCommitterName(commitDetails.get(&quot;committer_name&quot;).asText());&#10;            commitResponse.setCommitterEmail(commitDetails.get(&quot;committer_email&quot;).asText());&#10;            commitResponse.setDate(commitDetails.get(&quot;created_at&quot;).asText());&#10;            commitResponse.setMessage(commitDetails.get(&quot;message&quot;).asText());&#10;&#10;            JsonNode stats = commitDetails.get(&quot;stats&quot;);&#10;            if (stats != null) {&#10;                commitResponse.setAdditions(stats.get(&quot;additions&quot;).asInt());&#10;                commitResponse.setDeletions(stats.get(&quot;deletions&quot;).asInt());&#10;                commitResponse.setTotalChanges(stats.get(&quot;additions&quot;).asInt() + stats.get(&quot;deletions&quot;).asInt());&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Security: Validate input parameters&#10;     */&#10;    private boolean isValidInput(String owner, String repo) {&#10;        if (owner == null || repo == null) {&#10;            return false;&#10;        }&#10;&#10;        // Check length limits&#10;        if (owner.length() &gt; 100 || repo.length() &gt; 100) {&#10;            return false;&#10;        }&#10;&#10;        String projectPath = owner + &quot;/&quot; + repo;&#10;        return VALID_PROJECT_NAME.matcher(projectPath).matches();&#10;    }&#10;&#10;    /**&#10;     * Security: Simple rate limiting implementation&#10;     */&#10;    private boolean checkRateLimit(String endpoint) {&#10;        String key = endpoint + &quot;_&quot; + (System.currentTimeMillis() / 60000);&#10;        AtomicInteger count = rateLimitMap.computeIfAbsent(key, k -&gt; new AtomicInteger(0));&#10;&#10;        // Clean old entries&#10;        rateLimitMap.entrySet().removeIf(entry -&gt;&#10;            !entry.getKey().endsWith(&quot;_&quot; + (System.currentTimeMillis() / 60000)));&#10;&#10;        return count.incrementAndGet() &lt;= MAX_REQUESTS_PER_MINUTE;&#10;    }&#10;&#10;    /**&#10;     * Security: Create HTTP client with proper SSL/TLS configuration&#10;     */&#10;    private CloseableHttpClient createSecureHttpClient() throws Exception {&#10;        return HttpClients.custom()&#10;                .useSystemProperties()&#10;                .build();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>